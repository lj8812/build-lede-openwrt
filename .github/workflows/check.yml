name: OpenWrt Plugin Compatibility Builder

on:
  workflow_dispatch:
    inputs:
      target:
        description: '目标平台（格式：架构/子架构）'
        required: true
        default: 'x86/64'
      firmware_version:
        description: 'OpenWrt 版本号'
        required: true
        default: '23.05.5'
      plugin_repo:
        description: '插件源码仓库地址'
        required: true
        default: 'https://github.com/lj8812/luci-app-macfilter.git'

jobs:
  compatibility-check:
    runs-on: ubuntu-latest
    timeout-minutes: 90
    env:
      PLUGIN_PATH: "network/services/luci-app-macfilter"

    steps:
    # ================== 源码准备 ==================
    - name: Checkout LEDE firmware
      uses: actions/checkout@v4
      with:
        repository: coolsnowwolf/lede
        path: lede
        submodules: recursive

    - name: Checkout plugin
      uses: actions/checkout@v4
      with:
        repository: lj8812/luci-app-macfilter
        path: plugin
        ref: main  # 使用实际存在的分支名
        # 如果仓库是私有仓库需添加：
        # token: ${{ secrets.ACCESS_TOKEN }}

    # ================== 分支验证 (新增步骤) ==================
    - name: Validate plugin branch
      run: |
        cd plugin
        CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
        echo "当前分支: $CURRENT_BRANCH"
        if [ "$CURRENT_BRANCH" != "main" ]; then
          echo "::error::分支验证失败，期望分支：main，实际分支：$CURRENT_BRANCH"
          exit 1
        fi

    # ================== 预检阶段 ==================
    - name: 插件完整性验证
      run: |
        REQUIRED_FILES=(
          "plugin/luasrc/controller/macfilter.lua"
          "plugin/root/etc/init.d/macfilter"
        )
        for file in "${REQUIRED_FILES[@]}"; do
          if [ ! -f "$file" ]; then
            echo "::error::缺失关键文件: $file"
            exit 1
          fi
        done

        MAKE_VALIDATIONS=(
          "^include .*/rules\.mk"
          "^LUCI_DEPENDS"
          "^LUCI_TITLE"
        )
        for pattern in "${MAKE_VALIDATIONS[@]}"; do
          if ! grep -q "$pattern" plugin/Makefile; then
            echo "::error::Makefile 缺少必要定义: $pattern"
            exit 1
          fi
        done

    # ================== 插件集成 ================== 
    - name: 注入插件到编译系统
      run: |
        mkdir -p lede/package/$PLUGIN_PATH
        cp -r plugin/* lede/package/$PLUGIN_PATH/
        
        # 统一配置文件路径大小写
        find lede/package/$PLUGIN_PATH -type f -exec sed -i \
          's/\/etc\/config\/MacFilter/\/etc\/config\/macfilter/g' {} +

    # ================== 编译环境配置 ==================
    - name: 配置 Ubuntu 编译环境
      run: |
        # 配置非交互模式
        echo 'APT::Get::Assume-Yes "true";' | sudo tee /etc/apt/apt.conf.d/99forceyes
        echo 'APT::Get::AllowUnauthenticated "true";' | sudo tee -a /etc/apt/apt.conf.d/99forceyes
        export DEBIAN_FRONTEND=noninteractive

        # 安装仓库管理工具
        sudo apt-get install -y software-properties-common

        # 启用必要仓库（幂等操作）
        for repo in universe multiverse; do
          if ! grep -q "^deb.*$repo" /etc/apt/sources.list; then
            sudo add-apt-repository $repo -y
          fi
        done

        # 更新并安装依赖
        sudo apt-get update -y
        sudo apt-get install -y \
          build-essential clang flex g++ gawk \
          gcc-multilib gettext git libncurses-dev \
          libssl-dev python3-dev python3-lib2to3 \
          rsync unzip zlib1g-dev libdeflate-dev \
          ccache ecj fastjar file

        # 配置 Python 软链接
        sudo ln -sf /usr/bin/python3 /usr/bin/python

    # ================== 编译执行 ==================
    - name: 执行插件编译
      working-directory: ./lede
      env:
        CCACHE_DIR: /tmp/ccache
      run: |
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        make defconfig

        mkdir -p logs
        set -o pipefail

        # 清理并编译
        make package/$PLUGIN_PATH/clean || true
        if ! make package/$PLUGIN_PATH/compile \
          V=sc \
          -j$(($(nproc) + 1)) 2>&1 | tee logs/build.log
        then
          echo "::error::编译失败，错误码: $?"
          
          # 提取关键错误信息
          ERROR_CONTEXT=$(grep -iB 3 "error:" logs/build.log | tail -n 20)
          echo "::group::错误上下文"
          echo "$ERROR_CONTEXT"
          echo "::endgroup::"
          
          exit 1
        fi

        # 验证产出文件
        if [ -z "$(find bin/packages -name 'luci-app-macfilter*.ipk')" ]; then
          echo "::error::未生成 IPK 文件"
          exit 1
        fi

    # ================== 生成报告 ==================
    - name: 生成兼容性报告
      if: always()
      run: |
        echo "## OpenWrt 兼容性检测报告" > report.md
        echo "**编译状态:** ${{ job.status }}" >> report.md
        echo "**目标平台:** ${{ github.event.inputs.target }}" >> report.md
        echo "**固件版本:** ${{ github.event.inputs.firmware_version }}" >> report.md
        
        # 错误分类
        if grep -q "multiple definition" lede/logs/build.log; then
          echo "### ❌ 符号冲突" >> report.md
          grep -oP 'multiple definition of \K[^ ]+' lede/logs/build.log | sort -u >> report.md
        fi

        if grep -q "No such file" lede/logs/build.log; then
          echo "### ❌ 缺失文件" >> report.md
          grep -oP "No such file.*'\K[^']+" lede/logs/build.log | sort -u >> report.md
        fi

        if [ ${{ job.status }} == 'success' ]; then
          echo "### ✅ 验证通过" >> report.md
          echo "生成 IPK 文件路径:" >> report.md
          find lede/bin/packages -name 'luci-app-macfilter*.ipk' | sed 's/^/- `&`/' >> report.md
        fi

    # ================== 产出归档 ==================
    - name: 上传编译产物
      uses: actions/upload-artifact@v4
      with:
        name: openwrt-plugin-artifacts
        path: |
          lede/logs/build.log
          report.md
          lede/bin/packages/*/luci/luci-app-macfilter*.ipk
